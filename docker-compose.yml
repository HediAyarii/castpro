services:
  # Next.js Application
  app:
    build:
      context: .
      dockerfile: Dockerfile
    ports:
      - "3000:3000"
    environment:
      - NODE_ENV=production
      - DATABASE_URL=postgresql://postgres:postgres@postgres:5432/castpro
      - JWT_SECRET=your-super-secret-jwt-key-change-this-in-production
      - UPLOAD_SECRET=your-upload-secret-key-change-this-in-production
      - MAX_FILE_SIZE=5242880  # 5MB
      - UPLOAD_TIMEOUT=60000   # 60s
      - COMPRESSION_QUALITY=75
      - MAX_FILES_PER_BATCH=10
    depends_on:
      postgres:
        condition: service_healthy
    volumes:
      - ./public:/app/public
      - ./public/uploads:/app/public/uploads
    restart: unless-stopped
    networks:
      - castpro-network

  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    environment:
      - POSTGRES_DB=castpro
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./scripts:/docker-entrypoint-initdb.d
    restart: unless-stopped
    networks:
      - castpro-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres -d castpro"]
      interval: 10s
      timeout: 5s
      retries: 5

  # pgAdmin (Database Management)
  pgadmin:
    image: dpage/pgadmin4:latest
    container_name: castpro_pgadmin
    environment:
      - PGADMIN_DEFAULT_EMAIL=admin@castpro.com
      - PGADMIN_DEFAULT_PASSWORD=admin2024
      - PGADMIN_CONFIG_SERVER_MODE=False
      - PGADMIN_CONFIG_MASTER_PASSWORD_REQUIRED=False
    ports:
      - "8080:80"
    volumes:
      - pgadmin_data:/var/lib/pgadmin
    depends_on:
      - postgres
    restart: unless-stopped
    networks:
      - castpro-network

volumes:
  postgres_data:
    driver: local
  pgadmin_data:
    driver: local

networks:
  castpro-network:
    driver: bridge
